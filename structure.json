{
  "src": {
    "app": {
      "pages": {
        "Contenido": {
          "Clientes": {
            "Clientes.tsx": "import { FC, useContext, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { FiltroPaginado } from \"../../components/FiltroPaginado/FiltroPaginado\";\nimport { InfoCliente } from \"./InfoCliente/InfoCliente\";\nimport { PageTitle } from \"../../components/PageTitle/PageTitle\";\nimport { AgregarCliente } from \"./AgregarCliente/AgregarCliente\";\nimport { OpcionesClientes } from \"./OpcionesClientes/OpcionesClientes\";\nimport { ClientesContext } from \"./ClientesContext\";\nimport { FilterContext } from \"../../components/FilterContexr/FilterContext\";\nimport { FiltroClientes } from \"./FiltroClientes/FiltroClientes\";\nimport { loadClients } from \"../../../../services/ClientsService\";\nimport { Client } from \"../../../../type/Cliente/Client\";\n\nconst Clientes: FC = () => {\n  const { showModal, setShowModal, showMiniModal, showFiltro, setShowFiltro } =\n    useContext(ClientesContext);\n  const {\n    applicatedFilters,\n    fromDate,\n    toDate,\n    withLoans,\n    withoutLoans,\n    withCredit,\n    withoutCredit,\n    zone,\n    daysToRenew,\n    daysSinceRenewed,\n  } = useContext(FilterContext);\n\n  const [clients, setClients] = useState<Client[]>([]);\n  const [clientsFiltered, setClientsFiltered] = useState<Client[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<boolean>(false);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [currentData, setCurrentData] = useState<Client[]>([]);\n  const itemsPerPage: number = 10;\n  const [totalPage, setTotalPage] = useState<number>(0);\n\n  useEffect(() => {\n    let isMounted = true;\n    console.log(\"Cargando clientes...\");\n    const getClients = async () => {\n      try {\n        const response = await loadClients();\n        console.log(\"Clientes cargados:\", response.data);\n        if (isMounted) {\n          if (response.data && response.data.length > 0) {\n            let sortedClients = response.data.sort(\n              (a: Client, b: Client) =>\n                moment(b.lastSale).valueOf() - moment(a.lastSale).valueOf()\n            );\n\n            const fromDateMoment = fromDate ? moment(fromDate) : null;\n            const toDateMoment = toDate ? moment(toDate) : null;\n\n            // Aplicar filtros\n            if (applicatedFilters) {\n              sortedClients = sortedClients.filter((client: Client) => {\n                // Filtrar por préstamos\n                if (\n                  (withLoans && !client.hasLoan) ||\n                  (withoutLoans && client.hasLoan)\n                ) {\n                  return false;\n                }\n\n                // Filtrar por crédito\n                if (\n                  (withCredit && !client.credit) ||\n                  (withoutCredit && client.credit)\n                ) {\n                  return false;\n                }\n\n                // Filtrar por zona\n                if (zone.length > 0 && !zone.includes(client.zone)) {\n                  return false;\n                }\n\n                // Filtrar por fechas de creación\n                if (fromDateMoment && toDateMoment) {\n                  const createdDate = moment(client.created);\n                  console.log(\n                    `Filtrando por fecha de creación: ${createdDate.format()}`\n                  );\n                  if (\n                    createdDate.isBefore(fromDateMoment) ||\n                    createdDate.isAfter(toDateMoment)\n                  ) {\n                    return false;\n                  }\n                } else if (fromDateMoment) {\n                  const createdDate = moment(client.created);\n                  console.log(\n                    `Filtrando por fecha de creación desde: ${fromDateMoment.format()}`\n                  );\n                  if (createdDate.isBefore(fromDateMoment)) {\n                    return false;\n                  }\n                } else if (toDateMoment) {\n                  const createdDate = moment(client.created);\n                  console.log(\n                    `Filtrando por fecha de creación hasta: ${toDateMoment.format()}`\n                  );\n                  if (createdDate.isAfter(toDateMoment)) {\n                    return false;\n                  }\n                }\n\n                // Filtrar por fecha de renovación\n                const today = moment();\n                const renewDateMoment = client.renewDate\n                  ? moment(client.renewDate)\n                  : null;\n\n                if (daysToRenew != null && renewDateMoment) {\n                  const today = moment();\n                  const daysUntilRenewal = renewDateMoment.diff(today, \"days\");\n                  console.log(\n                    `Filtrando por fecha de renovación hasta en ${daysToRenew} días: ${daysUntilRenewal} días hasta la renovación`\n                  );\n                  if (\n                    daysUntilRenewal >= 0 &&\n                    daysUntilRenewal <= daysToRenew\n                  ) {\n                    return true;\n                  } else {\n                    return false;\n                  }\n                }\n\n                if (daysSinceRenewed != null && renewDateMoment) {\n                  const today = moment();\n                  const daysSinceRenewed = today.diff(renewDateMoment, \"days\");\n                  console.log(\n                    `Filtrando por renovado hace más de ${daysSinceRenewed} días: ${daysSinceRenewed} días desde la renovación`\n                  );\n                  if (daysSinceRenewed >= daysSinceRenewed) {\n                    return true;\n                  } else {\n                    return false;\n                  }\n                }\n              });\n            }\n\n            setClients(sortedClients);\n            setClientsFiltered(sortedClients);\n            setLoading(false);\n            setTotalPage(Math.ceil(sortedClients.length / itemsPerPage));\n            setCurrentData(sortedClients.slice(0, itemsPerPage));\n          } else {\n            setLoading(false);\n            setError(true);\n          }\n        }\n      } catch (e) {\n        console.error(\"Error loading clients:\", e);\n        if (isMounted) {\n          setError(true);\n          setLoading(false);\n        }\n      }\n    };\n\n    getClients();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    applicatedFilters,\n    fromDate,\n    toDate,\n    withLoans,\n    withoutLoans,\n    withCredit,\n    withoutCredit,\n    zone,\n    daysToRenew,\n    daysSinceRenewed,\n  ]);\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n    const startIndex: number = (page - 1) * itemsPerPage;\n    const endIndex: number = startIndex + itemsPerPage;\n    setCurrentData(clientsFiltered.slice(startIndex, endIndex));\n  };\n\n  const orderClients = (orden: string) => {\n    let clientesOrdenados: Client[] = [...clientsFiltered];\n\n    if (orden === \"new\") {\n      clientesOrdenados.sort(\n        (a: Client, b: Client) =>\n          moment(b.lastSale).valueOf() - moment(a.lastSale).valueOf()\n      );\n    } else if (orden === \"older\") {\n      clientesOrdenados.sort(\n        (a: Client, b: Client) =>\n          moment(a.lastSale).valueOf() - moment(b.lastSale).valueOf()\n      );\n    }\n\n    setClientsFiltered(clientesOrdenados);\n    setCurrentPage(1);\n    setCurrentData(clientesOrdenados.slice(0, itemsPerPage));\n  };\n\n  const handleSearchUser = (searchValue: string) => {\n    const value: string = searchValue.trim().toLowerCase();\n    if (value === \"\") {\n      setCurrentData(clientsFiltered.slice(0, itemsPerPage));\n    } else {\n      const filteredClients: Client[] = clients.filter(\n        (client: Client) =>\n          client.fullName?.toLowerCase().includes(value) ||\n          client.phoneNumber.includes(value)\n      );\n\n      setClientsFiltered(filteredClients);\n      setCurrentData(filteredClients.slice(0, itemsPerPage));\n    }\n    setCurrentPage(1);\n  };\n\n  if (loading) {\n    return <p>Cargando Clientes...</p>;\n  }\n\n  if (error) {\n    return (\n      <p>\n        Ha ocurrido un error en la carga, intentelo de nuevo en unos minutos.\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <PageTitle titulo=\"Clientes\" icon=\"./clientes-icon.svg\" />\n      <FiltroPaginado\n        add={true}\n        exportar={true}\n        typeDataToExport=\"clients\"\n        paginacion={true}\n        totalPage={totalPage}\n        currentPage={currentPage}\n        handlePageChange={handlePageChange}\n        onAdd={() => setShowModal(true)}\n        resultados={true}\n        filtro\n        total={clients.length}\n        search={handleSearchUser}\n        orderArray={orderClients}\n        onFilter={() => setShowFiltro(true)}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            gap: \"20px\",\n            justifyContent: \"start\",\n            flexWrap: \"wrap\",\n          }}\n        >\n          {currentData.map((client: Client) => (\n            <InfoCliente key={client._id} {...client} />\n          ))}\n        </div>\n      </FiltroPaginado>\n\n      {showModal && <AgregarCliente />}\n      {showMiniModal && <OpcionesClientes />}\n      {showFiltro && <FiltroClientes />}\n    </>\n  );\n};\n\nexport { Clientes };\n"
          }
        }
      }
    }
  }
}